/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.compiladoreq1;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author alfre
 */
public class interfazEq1 extends javax.swing.JFrame {

    /**
     * Creates new form interfazEq1
     */
    public interfazEq1() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public int resarch;
    public int banderaor;
    public DefaultTableModel modelo;
    public DefaultTableModel modelo_conj;
    public String etiquetaExpresion;
    public String etiquetaAlfabeto;
    int parent;
    int rsp;
        
    
    /******************************Utilizadas para Thomsom ;v*////////////////////////////////////////////
    public void separarCadenas(String filePath) {
        try {
            // Leer el archivo de texto
            File file = new File(filePath);
            BufferedReader reader = new BufferedReader(new FileReader(file));

            // Separamos las lineas del archivo
            etiquetaAlfabeto = reader.readLine();
            etiquetaExpresion = reader.readLine();
            
            // Se muestra los datos en la etiquetas correspondiente
            
            //La segunda linea es mandada a otra funcion para un nuevo uso.
            // Se cierra el lector
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void generatabla(String a)
    {
        char[] ab = a.toCharArray();
        int tam = a.length();
        modelo.addColumn("Estados");
        for(int i=0; i<tam; i++)
        {
            modelo.addColumn(ab[i]);
            TableColumn columna = jTable1.getColumnModel().getColumn(i+1);
            columna.setIdentifier(Character.toString(ab[i]));
            
        }
        modelo.addColumn("Epsilon");
        TableColumn columna = jTable1.getColumnModel().getColumn(tam+1);
        columna.setIdentifier("epsilon");
    }
    private void reordenaTabla()
    {
        int topes = modelo.getRowCount();
        String cadena =(String) modelo.getValueAt(0,0);
        String numeroString = cadena.replaceAll("[^0-9]", "");
        int ext = Integer.parseInt(numeroString);
        for (int row = 0; row < modelo.getRowCount(); row++) {
            for (int column = 0; column < modelo.getColumnCount(); column++) {
                String cellValue = (String)modelo.getValueAt(row, column);
                
                if(cellValue==null)
                    continue;
                
                String valor = "id"+ext+" ";
                Pattern pattern = Pattern.compile(valor);
                Matcher matcher = pattern.matcher(cellValue);
                
                if(!matcher.find())
                    continue;
                
                modelo.setValueAt(cellValue.replace("id"+ext+" ", "q0"), row, column);
            }
        }
        int numsust=0;
        for(int contador=0; contador<topes; contador++)
        {
            
            if(contador==ext)
                continue;
            numsust++;
            for(int row = 0; row < modelo.getRowCount(); row++)
            {
                for(int column = 0; column < modelo.getColumnCount(); column++)
                {
                    String cellValue = (String)modelo.getValueAt(row, column);
                    if(cellValue==null)
                        continue;
                    String valor = "id"+contador+" ";
                    Pattern pattern = Pattern.compile(valor);
                    Matcher matcher = pattern.matcher(cellValue);

                    if(!matcher.find())
                        continue;

                    modelo.setValueAt(cellValue.replace("id"+contador+" ", "q"+numsust+" "), row, column);
                }
            }
            
        }
        
        String initt = ((String)modelo.getValueAt(0, 0)+ " (i)");
        modelo.setValueAt(initt, 0, 0);
        
        String finn = ((String)modelo.getValueAt(modelo.getRowCount()-1, 0)+ " (f)");
        modelo.setValueAt(finn, modelo.getRowCount()-1, 0);
        
    }
    /************************************Utilizadas para conjuntos ************************/
    ////////////////////////variables
    
    DefaultTableModel conjuntos;
    String []archivo;
    ////////////////////////Para archivozs v;
    private void readFile(File file) {
        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            String line;
            StringBuilder text = new StringBuilder();
            
            etiquetaAlfabeto = br.readLine();
            jTextPane3.setText(etiquetaAlfabeto);
            while ((line = br.readLine()) != null) {
                text.append(line).append("\n");
            }
            archivo = text.toString().split("\n");
            StringBuilder transicionesText = new StringBuilder();
            for (String transicion : archivo) {
                transicionesText.append(transicion).append("\n");
            } 
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    
    
    public void generaTablaC(String a)
    {
        char[] ab = a.toCharArray();
        int tam = a.length();
        modelo_conj.addColumn("Estados");
        for(int i=0; i<tam; i++)
        {
            modelo_conj.addColumn(ab[i]);
            TableColumn columna = jTable2.getColumnModel().getColumn(i+1);
            columna.setIdentifier(Character.toString(ab[i]));
            
        }
        System.out.printf("jfiodsajfioasdjfiosadjfndj");
    }
    
    private void generaTabla1(String a)
    {
        char[] ab = a.toCharArray();    //convierte una cadena en un array de caracteres
        int tam = a.length();           //longitud de la cadena
        conjuntos.addColumn("Estados");
        for(int i=0; i<tam; i++)
        {
            conjuntos.addColumn(ab[i]);
            TableColumn columna = jTable3.getColumnModel().getColumn(i+1);
            columna.setIdentifier(Character.toString(ab[i]));
            
        }
        conjuntos.addColumn("Epsilon");
        TableColumn columna = jTable3.getColumnModel().getColumn(tam+1);
        columna.setIdentifier("epsilon");
    }

    private void insertaFilas(String a){
        String[] parts = a.split(",");  //Separa la cadena por las comas
        conjuntos.addRow(parts);
    }
    
    public String Cerradura1(String estado){
        String[] estado1 = estado.split("\\s+");
        String c;
        String cadena = new String();
        int i = 0;
        PilaS p = new PilaS();
        for (String ca:estado1){
            p.agrega(ca);
        }
        LimpiaArr(estado1);
        while(!p.vacia()){
            c = p.elimina();
            cadena = cadena + c + " ";
            System.out.println(cadena);
            while (!c.equals((String)conjuntos.getValueAt(i,0))){
                i++;
            }
            //System.out.printf("%d",i);
            c = (String) conjuntos.getValueAt(i,jTable3.getColumnModel().getColumnIndex("epsilon"));
            if(c != null){
                estado1 = c.split("\\s+");
                for (String ca:estado1){
                    p.agrega(ca);
                }
                LimpiaArr(estado1);
            }
            i=0;
         
        }
        
        System.out.println(cadena);
        estado1 = cadena.split("\\s+");
        int[] arr1 = new int[estado1.length];
        for (int j=0;j<estado1.length;j++){
            arr1[j]=Integer.parseInt(estado1[j]);
        }
        Arrays.sort(arr1);
        StringBuilder cadenaOrdenada = new StringBuilder();
        for( int j = 0; j<arr1.length;j++){
            if (j>0){
                cadenaOrdenada.append(" ");
            }
            cadenaOrdenada.append(arr1[j]);
        }
        cadena = cadenaOrdenada.toString();
        System.out.println(cadena);
        return cadena;
    }
    
    public void LimpiaArr(String[] arr){
        for (int i=0; i < arr.length;i++){
            arr[i]=null;
        }
    }
    
    
    /****************************************Para el analizador lÃ©xcico**************************************************/
    
    private static ArrayList<String> leerArchivo(File archivo) {
        ArrayList<String> contenidoArreglo = new ArrayList<>();
 
        try(BufferedReader br = new BufferedReader(new FileReader(archivo))) {
        String linea;
        int numeroLinea = 1;
 
            while((linea = br.readLine()) != null) {
                contenidoArreglo.add(linea);
                numeroLinea++;
            }
        } catch (FileNotFoundException e) {
            System.out.println("Archivo no encontrado");
        } catch (IOException e) {
            System.out.println("Error al leer el archivo");
        }
        return contenidoArreglo;
    }
    
    private static boolean esPalabraR(File archivo, String contenido) {
        ArrayList<String> contenidoArreglo = new ArrayList<>();
 
        try(BufferedReader br = new BufferedReader(new FileReader(archivo))) {
        String linea;
 
            while((linea = br.readLine()) != null) {
                if(linea.equals(contenido))
                    return true;
                
            }
        } catch (FileNotFoundException e) {
            System.out.println("Archivo no encontrado");
        } catch (IOException e) {
            System.out.println("Error al leer el archivo");
        }
        return false;
    }
    
    private void genAutomata()
    {
        File arch = new File("./pruebas/automata.txt");
        readFile(arch);
        
        String estado;
        String Cerradura;
        int EstadoActual = 0;
        ArrayList <String> estadosM = new ArrayList<String>();
        char[] alfabeto = etiquetaAlfabeto.toCharArray();
        generaTablaC(etiquetaAlfabeto);
        generaTabla1(etiquetaAlfabeto);
        for(int i=0; i<archivo.length; i++){
            insertaFilas(archivo[i]);
        }
        jFrame3.show();
        estado = "0";
        do
        {
            char strrr= (char)(EstadoActual+65);
             boolean bandera=false;
            modelo_conj.addRow(new Object[]{Character.toString(strrr)});
            Cerradura = "";
            if(estado!="")
            {
                Cerradura = Cerradura1(estado);
           
            for(int i=0; i<estadosM.size(); i++)
            {
                if(Cerradura.equals(estadosM.get(i)))
                {
                    bandera = true;
                    break;
                }
            }
            
            if(!bandera)
                estadosM.add(Cerradura);
            }
            //////////////Chercar demÃ¡s transiciÃ³nes v;
            String []trancito = estadosM.get(EstadoActual).split("\\s+");
            
            for(int i=0; i<etiquetaAlfabeto.length(); i++)
            {
                estado = "";
                String temp;
                for(int j=0; j<trancito.length;j++)
                {
                    int tttt= Integer.parseInt(trancito[j]);
                    temp = (String)conjuntos.getValueAt(tttt, jTable3.getColumnModel().getColumnIndex(Character.toString(alfabeto[i])));
                    
                    if(temp==""||temp==null)
                        continue;
                    if(estado=="")
                        estado += temp;
                    else
                        estado +=" "+temp;
                }
                if(estado=="")
                    continue;
                Cerradura = Cerradura1(estado);
                bandera = false;
                for(int a=0; a<estadosM.size(); a++)
                {
                    if(Cerradura.equals(estadosM.get(a)))
                    {
                        bandera = true;
                         modelo_conj.setValueAt(Character.toString((char)a+65),EstadoActual, jTable2.getColumnModel().getColumnIndex(Character.toString(alfabeto[i])));
                        break;
                    }
                }
                if(!bandera)
                {
                    estadosM.add(Cerradura);
                    modelo_conj.setValueAt(Character.toString((char)(estadosM.size()+64)),EstadoActual, jTable2.getColumnModel().getColumnIndex(Character.toString(alfabeto[i])));
                }
                
            }
            EstadoActual++;
        }while(EstadoActual!=estadosM.size());
        
        jTable2.setVisible(true);
    }
    
    
    /**********************************************************Para primeros y siguientes****************************************/
    String[] noTerminales = null;
    String[] terminales = null;
    String[][] transiciones = null;

    void extr_arch(String rutaArchivo) {
        try {
            
            FileReader fileReader = new FileReader(rutaArchivo);
            BufferedReader bufferedReader = new BufferedReader(fileReader);

            // No terminales
            String noTerminalesLinea = bufferedReader.readLine();
            noTerminales = noTerminalesLinea.split(" ");

            // terminales
            String terminalesLinea = bufferedReader.readLine();
            terminales = terminalesLinea.split(" ");

            
            String linea;
            int numTransiciones = 0;

            while ((linea = bufferedReader.readLine()) != null) {
                // Verificar que la lÃ­nea tenga el formato correcto
                if (linea.contains("->")) {
                    numTransiciones++;
                }
            }

            
            fileReader.close();
            fileReader = new FileReader(rutaArchivo);
            bufferedReader = new BufferedReader(fileReader);

            transiciones = new String[numTransiciones][2];

            // Se lee las transiciones y se almacena
            int i = 0;
            while ((linea = bufferedReader.readLine()) != null) {
                if (linea.contains("->")) {
    //indica que -> se debe de ignorar
                    String[] partes = linea.split("->");
                    transiciones[i][0] = partes[0].trim();
                    transiciones[i][1] = partes[1].trim();
                    i++;
                }
            }

            
            bufferedReader.close();

        } catch (IOException e) {
            
            e.printStackTrace();
        }
    }
    
    public String[] separarTerminalesNoTerminales(String cadena, String[] noTerminales, String[] terminales) {
        List<String> subcadenas = new ArrayList<>();
        StringBuilder subcadenaActual = new StringBuilder();
        for (int i = 0; i < cadena.length(); i++) {
            char caracter = cadena.charAt(i);
    
            // Verificar si el caracter actual es parte de un noTerminal
            for (String noTerminal : noTerminales) {
                if (noTerminal.startsWith(String.valueOf(caracter))) {
                    int j = 1;
                    while (j < noTerminal.length() && i + j < cadena.length()
                            && noTerminal.charAt(j) == cadena.charAt(i + j)) {
                        j++;
                    }
                    if (j == noTerminal.length()) {
                        subcadenaActual.append(noTerminal);
                        subcadenas.add(subcadenaActual.toString());
                        subcadenaActual = new StringBuilder();
                        i += j - 1;
                        break;
                    }
                }
            }
    
            // Verificar si el caracter actual es parte de un terminal
            for (String terminal : terminales) {
                if (terminal.startsWith(String.valueOf(caracter))) {
                    int j = 1;
                    while (j < terminal.length() && i + j < cadena.length()
                            && terminal.charAt(j) == cadena.charAt(i + j)) {
                        j++;
                    }
                    if (j == terminal.length()) {
                        subcadenaActual.append(terminal);
                        subcadenas.add(subcadenaActual.toString());
                        subcadenaActual = new StringBuilder();
                        i += j - 1;
                        break;
                    }
                }
                if(caracter=='3')
                {
                    subcadenaActual.append('3');
                    subcadenas.add(subcadenaActual.toString());
                    subcadenaActual = new StringBuilder();
                        break;
                }
            }
            
        }
        // Agregar la Ãºltima subcadena si existe
        if (subcadenaActual.length() > 0) {
            subcadenas.add(subcadenaActual.toString());
        }
        String[] producciones = subcadenas.toArray(new String[0]);
        return producciones;
    }
    
	
	public String[][] calculaPrimeros(String[][] transiciones,String[] noTerminales, String[] terminales){
		Object[][] matriz = null;
		String[][] primeros = new String[noTerminales.length][2];
		for (String[] transicion : transiciones) {
           System.out.println(transicion[0] + " -> " + transicion[1]);
           String[] produccion = separarTerminalesNoTerminales(transicion[1],noTerminales,terminales);
           matriz = agregarFila(matriz,transicion[0],produccion);
       }
		
		 for(int i=0; i<noTerminales.length;i++) {
			 primeros[i][0] = noTerminales[i];
			 primeros[i][1] = primeros(primeros[i][0],matriz,noTerminales,terminales);
		 }
		return primeros;
	}
	
	public static String primeros(String x, Object[][] matriz, String[] noTerminales, String[] terminales) {
		//1: Si x es terminal, entonces primero(x) es {x}
		for(String terminal : terminales) {
			if(x.equals(terminal))
				return x.concat(" ");
		}
                
		String primero = " ";
		String aux= new String();
		int numeroDeFilas = matriz.length;
		String[][] producciones = new String [numeroDeFilas][];
		for(int i=0; i < numeroDeFilas; i++) {
			producciones[i] = (String[]) matriz[i][1];
        
			if(x.equals(matriz[i][0]) && !x.equals(producciones[i][0])) {
				//2: Si x-> Îµ, aÃ±adir Îµ a primero(x)
				if(producciones[i].length == 1 && producciones[i][0] == "3") {
					 primero=primero.concat("3 ");
				}
				//3 Si x -> y1 y2...yk
               else {
                   int j = 0;
                   boolean agregarEpsilon = true;
                   do {
                       if(!aux.contains(producciones[i][j])&&!aux.contains(producciones[i][j]))
                            aux = primeros(producciones[i][j], matriz, noTerminales, terminales);
                       j++;
                     
                       if (!aux.contains("3")) {// Si Îµ no estÃ¡ en PRIMERO(Yj), agregar PRIMERO(Yj) a PRIMERO(X) y salir del bucle
                            primero = primero.concat(aux);
                           agregarEpsilon = false;
                           
                         
                       } 
                       else
                       {
                           if(x.equals("3")){// Si Îµ estÃ¡ en PRIMERO(Yj), aÃ±adir PRIMERO(Yj) a PRIMERO(X) excluyendo Îµ                        
                                primero = primero.concat("3 ");;                                                
                            }       
                       }
                       
                   } while (j < producciones[i].length && agregarEpsilon);
                   // Si Îµ estÃ¡ en PRIMERO(Yk) para todos los k, aÃ±adir Îµ a PRIMERO(X)
                   if (agregarEpsilon) {
                       primero = primero.concat("3 ");
                   }
               }
			}
		}
                
                
		return primero.trim();
	}
	
	private Object[][] agregarFila(Object[][] matrizOriginal, String simboloNoTerminal, String[] produccion) {
       if (matrizOriginal == null) {
           return new Object[][]{{simboloNoTerminal, produccion}};
       } else {
           int filasOriginales = matrizOriginal.length;
           Object[][] nuevaMatriz = Arrays.copyOf(matrizOriginal, filasOriginales + 1);
           nuevaMatriz[filasOriginales] = new Object[]{simboloNoTerminal, produccion};
           return nuevaMatriz;
       }
        }
    
    public String [][] calcularSiguientes(String [][] transiciones, String[] nt, String [] t){
        Object[][] matriz = null;
        String[][] siguientes = new String[nt.length][2];
        for (String[] transicion : transiciones) {
           System.out.println(transicion[0] + " -> " + transicion[1]);
           String[] produccion = separarTerminalesNoTerminales(transicion[1],nt,t);
           matriz = agregarFila(matriz,transicion[0],produccion);
       }
        for (int i = 0;i < nt.length; i++){
            siguientes[i][0] = nt[i];
            siguientes[i][1] = siguientes(siguientes[i][0],matriz,nt,t,siguientes[0][0]);
        }
        return siguientes;
    }
    
    public String siguientes(String x, Object [][] matriz, String[] nt, String [] t,String s){
        String sig = " ";
        if (x.equals(s)){
            sig = sig.concat("$ ");
        }
        int numeroDeFilas = matriz.length;
        String[][] producciones = new String [numeroDeFilas][];
        for(int i = 0; i < numeroDeFilas ; i++){
            producciones[i] = (String[]) matriz[i][1];
            for(int j = 0; j<producciones[i].length;j++){
                if (producciones[i][j].equals(x)){
                    if (j < producciones[i].length -1){
                        String aux1;
                        aux1 = primeros(producciones[i][j+1],matriz,nt,t);
                        sig = sig.concat(aux1);
                    }
                    else if (!producciones[i][j].equals((String)matriz[i][0])){
                        String aux1;
                        aux1 = siguientes((String)matriz[i][0],matriz,nt,t,s);
                        if (!sig.contains(aux1)){
                            sig = sig.concat(aux1);
                        }
                    }
                }
            }
        }
        return sig.trim();
    }  
        
        
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame2 = new javax.swing.JFrame();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jFileChooser1 = new javax.swing.JFileChooser();
        jFrame1 = new javax.swing.JFrame();
        jLabel5 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane3 = new javax.swing.JTextPane();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jFrame3 = new javax.swing.JFrame();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jFrame4 = new javax.swing.JFrame();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        jFrame5 = new javax.swing.JFrame();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jFrame6 = new javax.swing.JFrame();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        jFrame7 = new javax.swing.JFrame();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jFrame8 = new javax.swing.JFrame();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        jFrame2.setTitle("Algoritmo de Thomsom");
        jFrame2.setMinimumSize(new java.awt.Dimension(800, 600));
        jFrame2.setResizable(false);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Seleccione su archivo");

        jButton1.setText("Seleccionar");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("ExpresiÃ³n regular");

        jTextPane1.setText("â¢aaa");
        jTextPane1.setToolTipText("");
        jScrollPane1.setViewportView(jTextPane1);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Alfabeto");

        jScrollPane2.setViewportView(jTextPane2);

        jButton2.setText("Generar");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton2MousePressed(evt);
            }
        });

        jButton3.setText("Limpiar");
        jButton3.setEnabled(false);
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });

        jPanel1.setVisible(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 738, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jFrame2Layout = new javax.swing.GroupLayout(jFrame2.getContentPane());
        jFrame2.getContentPane().setLayout(jFrame2Layout);
        jFrame2Layout.setHorizontalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame2Layout.createSequentialGroup()
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame2Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(jFrame2Layout.createSequentialGroup()
                                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton2)
                                    .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)))
                                .addGap(126, 126, 126)
                                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton3)))))
                    .addGroup(jFrame2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jFrame2Layout.setVerticalGroup(
            jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(jFrame2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jFrame1.setTitle("Conjuntos v;");
        jFrame1.setMinimumSize(new java.awt.Dimension(800, 600));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setLabelFor(jButton4);
        jLabel5.setText("SelecciÃ³ne su archivo de tabla");

        jButton4.setText("ARCHIVO");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton4MousePressed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setLabelFor(jButton4);
        jLabel6.setText("ALFABETO");

        jScrollPane4.setViewportView(jTextPane3);

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setLabelFor(jButton4);
        jLabel7.setText("TABLA AFD:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.setVisible(false);
        modelo_conj = (DefaultTableModel)jTable2.getModel();
        jScrollPane5.setViewportView(jTable2);

        jButton5.setText("GENERAR");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton5MousePressed(evt);
            }
        });

        jButton6.setText("LIMPIAR");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton6MousePressed(evt);
            }
        });

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jFrame1Layout.createSequentialGroup()
                                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(157, 157, 157)
                                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton4)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6)))))
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jFrame1Layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jButton5)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton6))
                .addGap(43, 43, 43)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        conjuntos =(DefaultTableModel) jTable3.getModel();
        jScrollPane6.setViewportView(jTable3);

        //jScrollPane6.setVisible(false);

        javax.swing.GroupLayout jFrame3Layout = new javax.swing.GroupLayout(jFrame3.getContentPane());
        jFrame3.getContentPane().setLayout(jFrame3Layout);
        jFrame3Layout.setHorizontalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                .addContainerGap())
        );
        jFrame3Layout.setVerticalGroup(
            jFrame3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addContainerGap())
        );

        jFrame4.setMinimumSize(new java.awt.Dimension(512, 512));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Linea", "Lexema", "Token"
            }
        ));
        jScrollPane7.setViewportView(jTable4);

        jLabel8.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel8.setText("Tira de tokens");

        javax.swing.GroupLayout jFrame4Layout = new javax.swing.GroupLayout(jFrame4.getContentPane());
        jFrame4.getContentPane().setLayout(jFrame4Layout);
        jFrame4Layout.setHorizontalGroup(
            jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame4Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 741, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFrame4Layout.setVerticalGroup(
            jFrame4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame4Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jFrame5.setMinimumSize(new java.awt.Dimension(400, 300));

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "valor", "funcion"
            }
        ));
        jScrollPane8.setViewportView(jTable5);

        jLabel9.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel9.setText("Tabla de simbolos");

        javax.swing.GroupLayout jFrame5Layout = new javax.swing.GroupLayout(jFrame5.getContentPane());
        jFrame5.getContentPane().setLayout(jFrame5Layout);
        jFrame5Layout.setHorizontalGroup(
            jFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jFrame5Layout.setVerticalGroup(
            jFrame5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame5Layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jFrame6.setMinimumSize(new java.awt.Dimension(400, 300));

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# lÃ­nea", "Descripcion"
            }
        ));
        jScrollPane9.setViewportView(jTable6);

        jLabel10.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel10.setText("Tabla de errores");

        javax.swing.GroupLayout jFrame6Layout = new javax.swing.GroupLayout(jFrame6.getContentPane());
        jFrame6.getContentPane().setLayout(jFrame6Layout);
        jFrame6Layout.setHorizontalGroup(
            jFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame6Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jFrame6Layout.setVerticalGroup(
            jFrame6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFrame6Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        jFrame7.setMinimumSize(new java.awt.Dimension(800, 800));

        jLabel11.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel11.setText("Primeros");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane10.setViewportView(jTextArea1);

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel12.setText("Siguientes");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane11.setViewportView(jTextArea2);

        javax.swing.GroupLayout jFrame7Layout = new javax.swing.GroupLayout(jFrame7.getContentPane());
        jFrame7.getContentPane().setLayout(jFrame7Layout);
        jFrame7Layout.setHorizontalGroup(
            jFrame7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame7Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jFrame7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 753, Short.MAX_VALUE)
                    .addComponent(jLabel12)
                    .addComponent(jScrollPane10)
                    .addComponent(jLabel11))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jFrame7Layout.setVerticalGroup(
            jFrame7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame7Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel11)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(77, Short.MAX_VALUE))
        );

        jFrame8.setMinimumSize(new java.awt.Dimension(800, 600));
        jFrame8.setPreferredSize(new java.awt.Dimension(800, 600));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel13.setText("ColecciÃ³n CanÃ³nica");

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(jTable7);

        javax.swing.GroupLayout jFrame8Layout = new javax.swing.GroupLayout(jFrame8.getContentPane());
        jFrame8.getContentPane().setLayout(jFrame8Layout);
        jFrame8Layout.setHorizontalGroup(
            jFrame8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame8Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jFrame8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 754, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jFrame8Layout.setVerticalGroup(
            jFrame8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFrame8Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/Unbenannt.png"))); // NOI18N
        jLabel1.setText("   ");

        jMenu1.setText("Analizador Lexico");

        jMenuItem1.setText("Algoritmo de Thomsom");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem1MousePressed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Algoritmo de Conjuntos");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem2MousePressed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Analizador LÃ©xcico");
        jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem3MousePressed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analizador Sintactico");

        jMenuItem4.setText("Primeros y siguientes");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem4MousePressed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("ColecciÃ³n CanÃ³nica");
        jMenuItem5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenuItem5MousePressed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 563, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 352, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        jFrame2.show();// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MousePressed
       jFrame2.show(); // TODO add your handling code here:
       
    }//GEN-LAST:event_jMenuItem1MousePressed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
            // TODO add your handling code here:
        resarch = jFileChooser1.showOpenDialog(null);
        String filePath  = jFileChooser1.getSelectedFile().getAbsolutePath();
          
        separarCadenas(filePath);
        
        jTextPane2.setText(etiquetaExpresion);
        jTextPane1.setText(etiquetaAlfabeto);
       
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MousePressed
        //Pila pila = new Pila();
        
        jButton2.setEnabled(false);
        jButton3.setEnabled(true);
        Pila pilai = new Pila();
        Pila pilaf = new Pila();
        Pila pilap = new Pila(); //Pila para los parentesis
        
        modelo = (DefaultTableModel) jTable1.getModel();
        if(resarch != JFileChooser.APPROVE_OPTION)
        {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ningÃºn archivo");
            return;
        }

        //
        /*
        String expresion = new String("(a|b)*abb");
        String alfabeto = "ab";
        
        */
        jButton2.setEnabled(false);
        generatabla(etiquetaAlfabeto);
        int tamanho_exp = etiquetaExpresion.length();
        int estado_actual = 0;
        char[] palabras  = etiquetaExpresion.toCharArray();
        
        for(int i=0; i<tamanho_exp; i++)
        {
            if(palabras[i]=='(')
            {
                modelo.addRow(new Object[]{"id"+estado_actual+" "});
                if(!pilaf.vacia())
                    modelo.setValueAt("id"+estado_actual+" ", pilaf.elimina(), jTable1.getColumnModel().getColumnIndex("epsilon"));
                else
                {
                   pilai.agrega((char)estado_actual);
                }
                 pilaf.agrega((char)estado_actual);
                 pilap.agrega((char)estado_actual++);
            }
                
            //pila.agrega(palabras[i]);
            else if(palabras[i]=='|')
            {
                banderaor = 1;
                continue;
            }
            else if(palabras[i]=='*')
            {
                
                if(!pilap.vacia())
                {
                    int temp1p = (int)pilap.elimina();
                    modelo.addRow(new Object[]{("id"+estado_actual+" ")});
                    int temp1f = (int)pilaf.elimina();
                    pilaf.agrega((char)estado_actual++);
                    modelo.setValueAt("id"+(int)pilaf.tope()+" id"+temp1p+" ", temp1f, jTable1.getColumnModel().getColumnIndex("epsilon")); 
                    String valoor = (String) modelo.getValueAt(temp1p, jTable1.getColumnModel().getColumnIndex("epsilon"));
                    valoor = valoor+ "id"+temp1f+ " ";
                    modelo.setValueAt(valoor,temp1p, jTable1.getColumnModel().getColumnIndex("epsilon"));
                }
                else
                {
                    modelo.addRow(new Object[]{("id"+estado_actual+" ")});
                    int temp1i = (int)pilai.elimina();
                    pilai.agrega((char)estado_actual++);

                    modelo.addRow(new Object[]{("id"+estado_actual+" ")});
                    int temp1 = (int)pilaf.elimina();
                    pilaf.agrega((char)estado_actual++);

                    modelo.setValueAt("id"+temp1i+" id"+(int)pilaf.tope()+" ", (int)pilai.tope(), jTable1.getColumnModel().getColumnIndex("epsilon"));


                    modelo.setValueAt("id"+(int)pilaf.tope()+" id"+temp1i+" ", temp1, jTable1.getColumnModel().getColumnIndex("epsilon"));

                }
            }
            else if(palabras[i]==')')
            {
                if(banderaor==2)
                {
                    banderaor=0;

                    int temp1,temp2;
                    if(pilap.vacia())
                    {
                        modelo.addRow(new Object[]{("id"+estado_actual+" ")});
                        temp1 = (int)pilai.elimina();
                    }
                    else
                        temp1 = (int)pilap.tope();
                    
                    temp2 = (int)pilai.elimina();
                    String aux = ("id"+temp1+" id"+temp2+" ");
                    if(!pilap.vacia())
                        modelo.setValueAt(aux, pilap.tope(), jTable1.getColumnModel().getColumnIndex("epsilon"));
                    else
                        modelo.setValueAt(aux, estado_actual, jTable1.getColumnModel().getColumnIndex("epsilon"));
                                            
                    if(pilap.vacia())
                        pilai.agrega((char)estado_actual++);

                    modelo.addRow(new Object[]{("id"+estado_actual+" ")});
                    temp1 = (int)pilaf.elimina();
                    temp2 = (int)pilaf.elimina();
                    modelo.setValueAt("id"+estado_actual+" ", temp1, jTable1.getColumnModel().getColumnIndex("epsilon"));
                    modelo.setValueAt("id"+estado_actual+" ", temp2, jTable1.getColumnModel().getColumnIndex("epsilon"));
                    pilaf.agrega((char)estado_actual++);
                }
                else
                {
                    modelo.addRow(new Object[]{"id"+estado_actual+" "});
                    modelo.setValueAt("id"+estado_actual+" ", (int)pilaf.elimina(), jTable1.getColumnModel().getColumnIndex("epsilon"));
                    pilaf.agrega((char)estado_actual++);
                }
            }
            else if(palabras[i]=='+')
            {
                modelo.addRow(new Object[]{"id"+estado_actual+" "});
                modelo.setValueAt("id"+estado_actual+" id"+(int)pilap.elimina()+" ", (int)pilaf.elimina(), jTable1.getColumnModel().getColumnIndex("epsilon"));
                pilaf.agrega((char)estado_actual++);
            }            
            else if(palabras[i]=='?')
            {
                modelo.addRow(new Object[]{"id"+estado_actual+" "});
                modelo.setValueAt("id"+estado_actual+" ", pilaf.elimina(), jTable1.getColumnModel().getColumnIndex("epsilon"));
                String nuevo = (String)jTable1.getValueAt(pilap.tope(), jTable1.getColumnModel().getColumnIndex("epsilon"));
                nuevo += "id"+estado_actual+" ";
                modelo.setValueAt(nuevo, pilap.elimina(), jTable1.getColumnModel().getColumnIndex("epsilon"));
                pilaf.agrega((char)estado_actual++);
            }
            else
            {
                if(pilai.vacia()||banderaor==1)
                {
                    Object[] newRow = new Object[modelo.getColumnCount()];
                    newRow[0] = ("id"+estado_actual+" ");
                    modelo.addRow(newRow);
                    int estadoi = estado_actual;
                    pilai.agrega((char)estado_actual++);
                    
                    newRow = new Object[modelo.getColumnCount()];
                    newRow[0] = ("id"+estado_actual+" ");
                    modelo.addRow(newRow);
                    int indiceColumna = jTable1.getColumnModel().getColumnIndex(Character.toString(palabras[i]));
                    modelo.setValueAt("id"+estado_actual+" ", estadoi, indiceColumna);
                    pilaf.agrega((char)estado_actual++);
                    
                    if(banderaor==1)
                        banderaor=2;
                }
                else
                {
                    int estadof = (int)pilaf.elimina();
                    modelo.addRow(new Object[]{("id"+estado_actual+" ")});
                    int indiceColumna = jTable1.getColumnModel().getColumnIndex(Character.toString(palabras[i]));
                    modelo.setValueAt("id"+estado_actual+" ", (int)estadof, indiceColumna);
                    pilaf.agrega((char)estado_actual++);
                }
            }
        }
        if(banderaor==2)
        {
            banderaor=0;

            modelo.addRow(new Object[]{("id"+estado_actual+" ")});
            int temp1,temp2;

            temp1 = (int)pilai.elimina();
            temp2 = (int)pilai.elimina();
            String aux = new String("id"+temp1+" id"+temp2+" ");
            modelo.setValueAt(aux, estado_actual, jTable1.getColumnModel().getColumnIndex("epsilon"));
            pilai.agrega((char)estado_actual++);

            modelo.addRow(new Object[]{("id"+estado_actual+" ")});
            temp1 = (int)pilaf.elimina();
            temp2 = (int)pilaf.elimina();
            modelo.setValueAt("id"+estado_actual+" ", temp1, jTable1.getColumnModel().getColumnIndex("epsilon"));
            modelo.setValueAt("id"+estado_actual+" ", temp2, jTable1.getColumnModel().getColumnIndex("epsilon"));
            pilaf.agrega((char)estado_actual++);
        }
        
        modelo.moveRow(pilai.tope(), pilai.tope(), 0);
        reordenaTabla();
    }//GEN-LAST:event_jButton2MousePressed

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
       modelo.setRowCount(0);
       modelo.setColumnCount(0);
       
       jButton2.setEnabled(true);
       jButton3.setEnabled(false);
    }//GEN-LAST:event_jButton3MousePressed

    private void jButton6MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MousePressed
        modelo_conj.setColumnCount(0);
        modelo_conj.setRowCount(0);
        conjuntos.setColumnCount(0);
        conjuntos.setRowCount(0);
        jTable2.setVisible(false);
    }//GEN-LAST:event_jButton6MousePressed

    private void jMenuItem2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MousePressed
        jFrame1.show();
    }//GEN-LAST:event_jMenuItem2MousePressed

    private void jButton5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MousePressed
        String estado;
        String Cerradura;
        int EstadoActual = 0;
        ArrayList <String> estadosM = new ArrayList<String>();
        char[] alfabeto = etiquetaAlfabeto.toCharArray();
        generaTablaC(etiquetaAlfabeto);
        generaTabla1(etiquetaAlfabeto);
        for(int i=0; i<archivo.length; i++){
            insertaFilas(archivo[i]);
        }
        jFrame3.show();
        estado = "0";
        do
        {
            char strrr= (char)(EstadoActual+65);
             boolean bandera=false;
            modelo_conj.addRow(new Object[]{Character.toString(strrr)});
            Cerradura = "";
            if(estado!="")
            {
                Cerradura = Cerradura1(estado);
           
            for(int i=0; i<estadosM.size(); i++)
            {
                if(Cerradura.equals(estadosM.get(i)))
                {
                    bandera = true;
                    break;
                }
            }
            
            if(!bandera)
                estadosM.add(Cerradura);
            }
            //////////////Chercar demÃ¡s transiciÃ³nes v;
            String []trancito = estadosM.get(EstadoActual).split("\\s+");
            
            for(int i=0; i<etiquetaAlfabeto.length(); i++)
            {
                estado = "";
                String temp;
                for(int j=0; j<trancito.length;j++)
                {
                    int tttt= Integer.parseInt(trancito[j]);
                    temp = (String)conjuntos.getValueAt(tttt, jTable3.getColumnModel().getColumnIndex(Character.toString(alfabeto[i])));
                    
                    if(temp==""||temp==null)
                        continue;
                    if(estado=="")
                        estado += temp;
                    else
                        estado +=" "+temp;
                }
                if(estado=="")
                    continue;
                Cerradura = Cerradura1(estado);
                bandera = false;
                for(int a=0; a<estadosM.size(); a++)
                {
                    if(Cerradura.equals(estadosM.get(a)))
                    {
                        bandera = true;
                         modelo_conj.setValueAt(Character.toString((char)a+65),EstadoActual, jTable2.getColumnModel().getColumnIndex(Character.toString(alfabeto[i])));
                        break;
                    }
                }
                if(!bandera)
                {
                    estadosM.add(Cerradura);
                    modelo_conj.setValueAt(Character.toString((char)(estadosM.size()+64)),EstadoActual, jTable2.getColumnModel().getColumnIndex(Character.toString(alfabeto[i])));
                }
                
            }
            EstadoActual++;
        }while(EstadoActual!=estadosM.size());
        
        jTable2.setVisible(true);
    }//GEN-LAST:event_jButton5MousePressed

    private void jButton4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MousePressed
        JFileChooser jFileChooser2 = new JFileChooser("C:\\pruebas");
        resarch = jFileChooser2.showOpenDialog(null);
        String filePath  = jFileChooser2.getSelectedFile().getAbsolutePath();
        File arch = new File(filePath);
        readFile(arch);
    }//GEN-LAST:event_jButton4MousePressed

    private void jMenuItem3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem3MousePressed
        JFileChooser archivo_analizador = new JFileChooser("./pruebas");
        archivo_analizador.showOpenDialog(null);
        File archivo = new File(archivo_analizador.getSelectedFile().getAbsolutePath());
        File archvelement = new File("./pruebas/reservadas.txt");
        ArrayList<String> arregloArch = leerArchivo(archivo);
        
        genAutomata();
        
        /////////////El automata ahora estÃ¡ guardado en la tabla Llamada jTable2
        
        DefaultTableModel modeloAn = (DefaultTableModel) jTable2.getModel();
        DefaultTableModel modeloTt = (DefaultTableModel) jTable4.getModel(); //Tabla de la tira de tokens
        DefaultTableModel modeloTs = (DefaultTableModel) jTable5.getModel(); //Tabla de Simbolos
        DefaultTableModel modeloTe = (DefaultTableModel) jTable6.getModel(); //Tabla de errores
        
        /////////////////////////ReinicializaciÃ³n de las tablas
        
        modeloTt.setRowCount(0);
        modeloTs.setRowCount(0); 
        modeloTe.setRowCount(0);
        
        jFrame4.show();
        jFrame5.show();
        jFrame6.show();
        boolean comento = false;
        for(int i=0; i<arregloArch.size(); i++)
        {
            char arr[] = arregloArch.get(i).toCharArray();
            String elemento = new String();
            int estadoAct=0;
            boolean cadenita = false;
            if(arr.length == 0)
                continue;
            
            if(arr[0]=='#')
            {
                modeloTt.addRow(new Object[]{i, arregloArch.get(i), "include"});
                continue;
            }
            for(int j=0; j<arr.length; j++)
            {
                if(arr[j]=='\"')
                {
                    if(cadenita)
                    {
                        cadenita = false;
                        modeloTt.addRow(new Object[]{i, "\"", "literalCad"});
                        elemento = new String();
                        estadoAct = 0;
                        continue;
                    }
                    else
                    {
                        modeloTt.addRow(new Object[]{i, elemento, elemento});
                        cadenita = true;
                    }
                }
                if(j<arr.length-1)
                {
                    if(arr[j]=='/'&&arr[j+1]=='/')
                        cadenita = true;
                    if(arr[j]=='/'&&arr[j+1]=='*')
                        comento = true;
                }
                if(j>0&&(arr[j]=='/'&&arr[j-1]=='*'))
                {
                    comento = false;
                    continue;
                }
                if(cadenita||comento)
                    continue;
                if(arr[j]==' '||arr[j]=='\t')
                {
                    if(elemento.isEmpty()||elemento==null)
                    {
                        elemento = new String();
                        estadoAct = 0;
                        continue;
                    }
                    else if(estadoAct==1)
                    {
                        if(esPalabraR(archvelement,elemento))
                            modeloTt.addRow(new Object[]{i,elemento,elemento});
                        else
                        {
                            modeloTt.addRow(new Object[]{i,elemento,"id"});
                            modeloTs.addRow(new Object[]{elemento});
                        }
                    }
                    else if(estadoAct==30)
                        modeloTt.addRow(new Object[]{i,elemento,"nfloat"});
                    else if(estadoAct==2)
                        modeloTt.addRow(new Object[]{i, elemento, "nint"});
                    else if(estadoAct==31)
                        modeloTt.addRow(new Object[]{i, elemento, "literalCad"});
                    else if(estadoAct==32)
                        modeloTt.addRow(new Object[]{i, elemento, "literalCar"});
                    else
                        modeloTt.addRow(new Object[]{i, elemento, elemento});
                    
                    elemento = new String();
                    estadoAct = 0;
                    continue;
                }
                if(Character.isLetter(arr[j]))
                {
                    String f = (String)modeloAn.getValueAt(estadoAct, jTable2.getColumnModel().getColumnIndex("l"));
                    if(f==null||f=="")
                    {
                        if(elemento.isEmpty()||elemento==null)
                            continue;
                        else if(estadoAct==1)
                        {
                            if(esPalabraR(archvelement,elemento))
                                modeloTt.addRow(new Object[]{i,elemento,elemento});
                            else
                            {
                                modeloTt.addRow(new Object[]{i,elemento,"id"});
                                modeloTs.addRow(new Object[]{elemento});
                            }
                        }
                        else if(estadoAct==30)
                            modeloTt.addRow(new Object[]{i,elemento,"nfloat"});
                        else if(estadoAct==2)
                            modeloTt.addRow(new Object[]{i, elemento, "nint"});
                        else if(estadoAct==31)
                            modeloTt.addRow(new Object[]{i, elemento, "literalCad"});
                        else if(estadoAct==32)
                            modeloTt.addRow(new Object[]{i, elemento, "literalCar"});
                        else
                            modeloTt.addRow(new Object[]{i, elemento, elemento});

                        elemento = new String();
                        estadoAct = 0;
                        j--;
                        continue;
                    }
                    elemento += arr[j];
                    estadoAct = (int)(f.charAt(0)-65);
                }
                else if(Character.isDigit(arr[j]))
                {
                    String f = (String)modeloAn.getValueAt(estadoAct, jTable2.getColumnModel().getColumnIndex("d"));
                    if(f==null)
                    {
                        if(elemento.isEmpty()||elemento==null)
                            continue;
                        else if(estadoAct==1)
                        {
                            if(esPalabraR(archvelement,elemento))
                                modeloTt.addRow(new Object[]{i,elemento,elemento});
                            else
                            {
                                modeloTt.addRow(new Object[]{i,elemento,"id"});
                                modeloTs.addRow(new Object[]{elemento});
                            }
                        }
                        else if(estadoAct==30)
                            modeloTt.addRow(new Object[]{i,elemento,"nfloat"});
                        else if(estadoAct==2)
                            modeloTt.addRow(new Object[]{i, elemento, "nint"});
                        else if(estadoAct==31)
                            modeloTt.addRow(new Object[]{i, elemento, "literalCad"});
                        else if(estadoAct==32)
                            modeloTt.addRow(new Object[]{i, elemento, "literalCar"});
                        else
                            modeloTt.addRow(new Object[]{i, elemento, elemento});

                        elemento = new String();
                        estadoAct = 0;
                        j--;
                        continue;
                    }
                    elemento += arr[j];
                    estadoAct = (int)(f.charAt(0)-65);
                }
                else
                {
                    try
                    {
                    int indice = jTable2.getColumnModel().getColumnIndex(Character.toString(arr[j]));
                    String f = (String)modeloAn.getValueAt(estadoAct, indice);
                    if(f==null||f=="")
                    {
                        if(elemento.isEmpty()||elemento==null)
                            continue;
                        else if(estadoAct==1)
                        {
                            if(esPalabraR(archvelement,elemento))
                                modeloTt.addRow(new Object[]{i,elemento,elemento});
                            else
                            {
                                boolean repetido = false;
                                modeloTt.addRow(new Object[]{i,elemento,"id"});
                                for(int k=0; k<modeloTs.getRowCount(); k++)
                                {
                                    String rr = (String)modeloTs.getValueAt(k, 0);
                                    if(rr.equals(elemento))
                                        repetido = true;
                                }
                                if(!repetido)
                                    modeloTs.addRow(new Object[]{elemento});
                            }
                        }
                        else if(estadoAct==30)
                            modeloTt.addRow(new Object[]{i,elemento,"nfloat"});
                        else if(estadoAct==2)
                            modeloTt.addRow(new Object[]{i, elemento, "nint"});
                        else if(estadoAct==31)
                            modeloTt.addRow(new Object[]{i, elemento, "literalCad"});
                        else if(estadoAct==32)
                            modeloTt.addRow(new Object[]{i, elemento, "literalCar"});
                        else
                            modeloTt.addRow(new Object[]{i, elemento, elemento});

                        elemento = new String();
                        estadoAct = 0;
                        j--;
                        continue;
                    }
                    elemento += arr[j];
                    estadoAct = (int)(f.charAt(0)-65);
                    }
                    catch(IllegalArgumentException e)
                    {
                        modeloTe.addRow(new Object[]{i,"Simbolo no identificado"+arr[j]});
                        elemento = new String();
                        estadoAct = 0;
                        continue;
                    }
                }
                
                
            }
            if(!elemento.isEmpty())
            {
                if(estadoAct==1)
                {
                    if(esPalabraR(archvelement,elemento))
                        modeloTt.addRow(new Object[]{i,elemento,elemento});
                    else
                    {
                        modeloTt.addRow(new Object[]{i,elemento,"id"});
                        modeloTs.addRow(new Object[]{elemento});
                    }
                }
                else if(estadoAct==30)
                    modeloTt.addRow(new Object[]{i,elemento,"nfloat"});
                else if(estadoAct==2)
                    modeloTt.addRow(new Object[]{i, elemento, "nint"});
                else if(estadoAct==31)
                    modeloTt.addRow(new Object[]{i, elemento, "literalCad"});
                else if(estadoAct==32)
                    modeloTt.addRow(new Object[]{i, elemento, "literalCar"});
                else
                    modeloTt.addRow(new Object[]{i, elemento, elemento});
                elemento = new String();
                estadoAct = 0;
            }
        }
    }//GEN-LAST:event_jMenuItem3MousePressed

    private void jMenuItem4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem4MousePressed
        JFileChooser archivo_analizador = new JFileChooser("./pruebasPS");
        archivo_analizador.showOpenDialog(null);
        
        extr_arch(archivo_analizador.getSelectedFile().getAbsolutePath());
        
        String prpr[][] = calculaPrimeros(transiciones, noTerminales, terminales);
        
        for(String prp[]:prpr)
        {
            for(int i=0; i<transiciones.length; i++)
            {
                if(transiciones[i][0].equals(prp[0]))
                    if(transiciones[i][1].contains("3"))
                        prp[1] += " 3";
            }
        }
        
        String sig[][] = calcularSiguientes(transiciones,noTerminales,terminales);
       
        jTextArea1.setText("");
        jTextArea2.setText("");
        
        for(String[] pr : prpr)
        {
            
            String[] palabras = pr[1].split("\\s+");  // Utiliza expresiones regulares para dividir por espacios

        // Utilizar un conjunto para eliminar duplicados
            Set<String> set = new HashSet<>(Arrays.asList(palabras));

        // Crear un nuevo string con las palabras Ãºnicas
            String resultado = String.join(" ", set);
            jTextArea1.append("Primero("+pr[0]+") = {"+resultado+"}");
            jTextArea1.append("\n");
        }
        
        for(String[] sg : sig)
        {
            jTextArea2.append("Siguente("+sg[0]+") = {"+sg[1]+"}");
            jTextArea2.append("\n");
        }
        jFrame7.show();
    }//GEN-LAST:event_jMenuItem4MousePressed

    private void jMenuItem5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem5MousePressed
        JFileChooser archivo_analizador = new JFileChooser("./pruebasCC");
       archivo_analizador.showOpenDialog(null);
        transiciones = null;
        noTerminales = null;
        terminales = null;
        
        extr_arch(archivo_analizador.getSelectedFile().getAbsolutePath());
        
        Canonica can = new Canonica();
        
        List<String> a = can.coleccion(transiciones, noTerminales, terminales);
        
        DefaultTableModel modelito = (DefaultTableModel) jTable7.getModel();
        modelito.setColumnCount(0);
        modelito.setRowCount(0);
        
        modelito.addColumn("ColecciÃ³n CanÃ³nica");
        
        for(int i=0; i<a.size();i++)
        {
            modelito.addRow(new Object[]{a.get(i)});
        }
        
        jFrame8.show();
    }//GEN-LAST:event_jMenuItem5MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfazEq1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfazEq1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfazEq1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfazEq1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfazEq1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JFrame jFrame2;
    private javax.swing.JFrame jFrame3;
    private javax.swing.JFrame jFrame4;
    private javax.swing.JFrame jFrame5;
    private javax.swing.JFrame jFrame6;
    private javax.swing.JFrame jFrame7;
    private javax.swing.JFrame jFrame8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JTextPane jTextPane3;
    // End of variables declaration//GEN-END:variables
}
